{
    "openapi": "3.0.0",
    "info": {
      "title": "API Desafio Back-end NodeJS Compass",
      "description": "Essa API faz parte do processo seletivo para a vaga de desenvolvedor  backend NodeJS da empresa Compass",
      "contact": {
        "email": "brunocoelho.r@gmail.com"
      },
      "version": "1.0.0"
    },
    "servers": [
      {
        "url": "http://localhost:3333/",
        "description": "API de teste"
      }
    ],
        "paths": {
            "/cities/findByName": {
                "get": {
                    "description": "This route is responsible for searching cities by name",
                    "summary": "Finds cities by name",
                    "tags": ["Cities"],
                    "parameters": [
                        {
                            "name": "name",
                            "in": "query",
                            "description": "Name for city search",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                        "$ref": "#/components/schemas/City"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/cities/findByState": {
                "get": {
                    "description": "This route is responsible for searching cities by state",
                    "summary": "Finds cities by state",
                    "tags": ["Cities"],
                    "parameters": [
                        {
                        "name": "state",
                        "in": "query",
                        "description": "State for city search",
                        "example": "RS",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 2,
                            "minLength": 2
                        }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                        "$ref": "#/components/schemas/City"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },            
            "/cities": {
                "get": {
                    "description": "Searching all cities",
                    "summary": "This route is responsible for searching all cities",
                    "tags": ["Cities"],
                    "responses": {
                        "200": {
                            "description": "OK",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                        "$ref": "#/components/schemas/City"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "post": {
                "summary": "Registration of cities",
                "description": "This route will be responsible for registering a new cities",
                "tags": ["Cities"],
                "requestBody": {
                    "content": {
                    "application/json": {
                        "schema": {
                        "$ref": "#/components/schemas/City"
                        },
                        "examples": {
                            "cities": {
                                "value": {
                                    "name": "Blumenau",
                                    "state" : "SC"
                                }
                            }
                        }
                    }
                    }
                },
                "responses": {
                    "400": {
                        "description": "City already exists!"
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/City"
                            }
                        }
                    }
                    }
                }
                }
            },
            "/customers": {
                "post": {
                  "summary": "Add a new customer",
                  "tags": ["Customers"],
                  "requestBody": {
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Customer"
                        },
                        "examples": {
                          "product": {
                            "value": {
                              "name": "Marcelo Gomes",
                              "gender" : "M",
                              "birthDate": "1999-01-28T00:00:00.000Z",
                              "cityId": 1
                            }
                          }
                        }
                      }
                    }
                  },
                  "responses": {
                    "400": {
                      "description": "Customer already exists!"
                    },
                    "200": {
                      "description": "OK",
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "$ref": "#/components/schemas/Customer"
                          }
                        }
                      }
                    }
                  }
                }
            },            
        "/customers/findByName": {
            "get": {
            "summary": "Finds customers by name",
            "description": "Returns a array of customers",
            "tags": ["Customers"],
            "parameters": [
                {
                "name": "name",
                "in": "query",
                "description": "Name values that need to be considered for filter",
                "required": true
                }
            ],
            "responses": {
                "200": {
                "description": "OK",
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "array",
                        "items": {
                        "$ref": "#/components/schemas/City"
                        }
                    }
                    }
                }
                }
            }
            }
        },
        "/customers/{id}": {
            "get": {
                "summary": "Finds customers by ID",
                "description": "Returns a single customer",
                "tags": ["Customers"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of customer to return",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a name of an existing customer",
                "tags": ["Customers"],
        
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "description": "ID of customer to update",
                    "required": true
                  }
                ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Customer"
                      },
                      "examples": {
                        "product": {
                          "value": {
                            "name": "Pedro Morais"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                    "400": {
                        "description": "Cannot update customer"
                      },
                  "200": {
                    "description": "OK",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "$ref": "#/components/schemas/Customer"
                        }
                      }
                    }
                  }
                }
            },
            "delete": {
                "summary": "Deletes a customer",
                "tags": ["Customers"],
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "description": "Customer id to delete",
                    "required": true
                  }
                ],
                "responses": {
                    "400": {
                        "description": "Cannot delete customer"
                      },
                  "200": {
                    "description": "OK"
                  }
                }
            }                
        }
    },
    "components": {
        "schemas": {
            "City": {
                "type": "object",
                "properties" : {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                }
            },
            "Customer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "gender":{
                        "type": "string"
                    },
                    "birthDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "cityId": {
                        "type": "integer"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            }
        }
    }
}